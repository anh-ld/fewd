{"version":3,"sources":["Todos.js","AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Todos","_this","this","todoList","props","todos","length","map","todo","react_default","a","createElement","className","key","id","onClick","deleteTodo","content","Component","AddTodo","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","addTodo","onSubmit","type","onChange","placeholder","App","filter","concat","Object","toConsumableArray","src_AddTodo","src_Todos","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNA4BeA,mLAzBJ,IAAAC,EAAAC,KACDC,EAAWD,KAAKE,MAAMC,MAAMC,OAChCJ,KAAKE,MAAMC,MAAME,IAAI,SAACC,GACpB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkBC,IAAKL,EAAKM,IACzCL,EAAAC,EAAAC,cAAA,QACEC,UAAU,kBACVG,QAAS,kBAAMd,EAAKG,MAAMY,WAAWR,EAAKM,MAEzCN,EAAKS,YAMdR,EAAAC,EAAAC,cAAA,KAAGC,UAAU,qBAAb,iCAEF,OACEH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACZT,UApBWe,aCkCLC,6MAjCbC,MAAQ,CACNH,QAAS,MAGXI,aAAe,SAACC,GACdrB,EAAKsB,SAAS,CAACN,QAASK,EAAEE,OAAOC,WAGnCC,aAAe,SAACJ,GACdA,EAAEK,iBACyB,KAAvB1B,EAAKmB,MAAMH,UACbhB,EAAKG,MAAMwB,QAAQ3B,EAAKmB,OACxBnB,EAAKsB,SAAS,CAACN,QAAS,+EAK1B,OACER,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMkB,SAAU3B,KAAKwB,cACnBjB,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,SAAOmB,KAAK,OACVC,SAAU7B,KAAKmB,aACfI,MAAOvB,KAAKkB,MAAMH,QAClBe,YAAY,kCAzBFd,aCoCPe,oNA/Bbb,MAAQ,CACNf,MAAO,CACL,CAACS,GAAI,EAAGG,QAAS,iBACjB,CAACH,GAAI,EAAGG,QAAS,uBAIrBD,WAAa,SAACF,GACZ,IAAMT,EAAQJ,EAAKmB,MAAMf,MAAM6B,OAAO,SAAC1B,GACrC,OAAOA,EAAKM,KAAOA,IAErBb,EAAKsB,SAAS,CAAClB,aAGjBuB,QAAU,SAACpB,GACTA,EAAKM,GAAKb,EAAKmB,MAAMf,MAAMC,OAAS,EACpC,IAAID,EAAK,GAAA8B,OAAAC,OAAAC,EAAA,EAAAD,CAAOnC,EAAKmB,MAAMf,OAAlB,CAAyBG,IAClCP,EAAKsB,SAAS,CAAClB,mFAIf,OACEI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBAAd,cACAH,EAAAC,EAAAC,cAAC2B,EAAD,CAASV,QAAS1B,KAAK0B,UACvBnB,EAAAC,EAAAC,cAAC4B,EAAD,CAAOlC,MAAOH,KAAKkB,MAAMf,MAAOW,WAAYd,KAAKc,qBA1BvCE,cCMEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e94049dd.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Todos extends Component {\n  render() {\n    const todoList = this.props.todos.length ? (\n      this.props.todos.map((todo) => {\n        return (\n          <div className=\"collection-item\" key={todo.id}>\n            <span\n              className=\"green-text item\"\n              onClick={() => this.props.deleteTodo(todo.id)}\n            >\n              {todo.content}\n            </span>\n          </div>\n        )\n      })\n    ) : (\n      <p className=\"center green-text\">You have no to-dos left, yay!</p>\n    )\n    return (\n      <div className=\"todos collection\">\n        {todoList}\n      </div>\n    );\n  }\n}\n\nexport default Todos;","import React, { Component } from 'react';\n\nclass AddTodo extends Component {\n  state = {\n    content: \"\"\n  }\n\n  handleChange = (e) => {\n    this.setState({content: e.target.value})\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    if (this.state.content !== \"\") {\n      this.props.addTodo(this.state);\n      this.setState({content: \"\"});\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <label>Add new todo:</label>\n          <input type=\"text\"\n            onChange={this.handleChange}\n            value={this.state.content}\n            placeholder=\"Clean the kitchen ..\"\n          >\n          </input>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default AddTodo;","import React, { Component } from 'react';\nimport Todos from './Todos';\nimport AddTodo from './AddTodo';\nimport 'materialize-css/dist/css/materialize.min.css';\nimport './index.css';\n\nclass App extends Component {\n  state = {\n    todos: [\n      {id: 1, content: \"Buy some milk\"},\n      {id: 2, content: \"Play mario kart\"}\n    ]\n  }\n\n  deleteTodo = (id) => {\n    const todos = this.state.todos.filter((todo) => {\n      return todo.id !== id;\n    })\n    this.setState({todos});\n  }\n\n  addTodo = (todo) => {\n    todo.id = this.state.todos.length + 1;\n    let todos = [...this.state.todos, todo];\n    this.setState({todos});\n  }\n\n  render() {\n    return (\n      <div className=\"App container\">\n        <h1 className=\"center teal-text\">To-Do List</h1>\n        <AddTodo addTodo={this.addTodo}/>\n        <Todos todos={this.state.todos} deleteTodo={this.deleteTodo}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}