{"version":3,"sources":["components/About.jsx","components/Error.jsx","components/Resume.jsx","components/Projects.jsx","components/Contact.jsx","components/Nav.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["About","react_default","a","createElement","Error","Resume","Projects","Contact","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","setState","value","target","handleClick","state","onChange","onClick","Prompt","when","message","Component","Nav","style","marginRight","NavLink","to","App","BrowserRouter","components_Nav","Switch","Redirect","exact","path","Route","component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sOAUeA,EARD,WACZ,OACEC,EAAAC,EAAAC,cAAA,iECMWC,EARD,WACZ,OACEH,EAAAC,EAAAC,cAAA,4BCUWE,EAZA,WACb,OACEJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,sBACYF,EAAAC,EAAAC,cAAA,WADZ,4BAE2BF,EAAAC,EAAAC,cAAA,WAF3B,gECUSG,EAbE,WACf,OACEL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,sBACYF,EAAAC,EAAAC,cAAA,WADZ,WAEUF,EAAAC,EAAAC,cAAA,WAFV,6BAG4BF,EAAAC,EAAAC,cAAA,WAH5B,yICkCSI,cAnCb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAIRQ,aAAe,SAACC,GACdR,EAAKS,SAAS,CAACC,MAAOF,EAAEG,OAAOD,SANdV,EASnBY,YAAc,WACZZ,EAAKS,SAAS,CAACC,MAAO,MARtBV,EAAKa,MAAQ,CAACH,MAAO,IAFJV,wEAcjB,OACER,EAAAC,EAAAC,cAAA,wBACYF,EAAAC,EAAAC,cAAA,WACVF,EAAAC,EAAAC,cAAA,SACEgB,MAAOP,KAAKU,MAAMH,MAClBI,SAAUX,KAAKI,eAEjBf,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQqB,QAASZ,KAAKS,aAAtB,WAIFpB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CACEC,KAA2B,KAArBd,KAAKU,MAAMH,MACjBQ,QAAQ,4CA7BIC,qBCcPC,EAdH,WACV,IAAIC,EAAQ,CACVC,YAAa,QAEf,OACE9B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAASC,GAAG,SAASH,MAAOA,GAA5B,SACA7B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAASC,GAAG,UAAUH,MAAOA,GAA7B,UACA7B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAASC,GAAG,YAAYH,MAAOA,GAA/B,YACA7B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAASC,GAAG,WAAWH,MAAOA,GAA9B,aCeSI,EAlBH,WACV,OACEjC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,KACElC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACiC,EAAD,MACAnC,EAAAC,EAAAC,cAACkC,EAAA,EAAD,KACEpC,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAUC,OAAK,EAACC,KAAK,IAAIP,GAAG,WAC5BhC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAOD,KAAK,SAASE,UAAW1C,IAChCC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAOD,KAAK,UAAUE,UAAWrC,IACjCJ,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAOD,KAAK,YAAYE,UAAWpC,IACnCL,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAOD,KAAK,WAAWE,UAAWnC,IAClCN,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAOC,UAAWtC,QCRRuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c5362a8a.chunk.js","sourcesContent":["import React from \"react\";\n\nconst About = () => {\n  return (\n    <div>\n      Hello, my name is Duy Anh. I'm a React Developer.\n    </div>\n  );\n};\n\nexport default About;","import React from \"react\";\n\nconst Error = () => {\n  return (\n    <div>\n      Invalid URL.\n    </div>\n  );\n};\n\nexport default Error;","import React from 'react';\n\nconst Resume = () => {\n  return (\n    <div>\n      <p>\n        Le Duy Anh<br />\n        Skills: React.js, Node.js<br />\n        Experience: 07/2018 - 09/2018: Internship at Samsung SVMC.\n      </p>\n    </div>\n  );\n};\n\nexport default Resume;","import React from 'react';\n\nconst Projects = () => {\n  return (\n    <div>\n      <p>\n        Le Duy Anh<br />\n        Projects<br />\n        crm: Car Rental Management<br />\n        fancy-cli: Recommend music artists, movies, tv shows, ... right from your terminal.\n      </p>\n    </div>\n  );\n};\n\nexport default Projects;","import React, { Component } from 'react';\nimport { Prompt } from \"react-router-dom\";\n\nclass Contact extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: \"\"};\n  }\n\n  handleChange = (e) => {\n    this.setState({value: e.target.value});\n  }\n\n  handleClick = () => {\n    this.setState({value: \"\"});\n  }\n\n  render() {\n    return (\n      <div>\n        Le Duy Anh<br />\n        <input\n          value={this.state.value}\n          onChange={this.handleChange}\n        />\n        <div>\n          <button onClick={this.handleClick}>\n            Submit\n          </button>\n        </div>\n        <Prompt\n          when={this.state.value !== \"\"}\n          message=\"Leave without sending messages?\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default Contact;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst Nav = () => {\n  let style = {\n    marginRight: \"10px\"\n  }\n  return (\n    <div>\n      <NavLink to='/about' style={style}>About</NavLink>\n      <NavLink to='/resume' style={style}>Resume</NavLink>\n      <NavLink to='/projects' style={style}>Projects</NavLink>\n      <NavLink to='/contact' style={style}>Contact</NavLink>\n    </div>\n  );\n};\n\nexport default Nav;","import React from \"react\";\nimport { BrowserRouter, Route, Redirect, Switch } from \"react-router-dom\";\nimport About from './About';\nimport Error from './Error';\nimport Resume from './Resume';\nimport Projects from './Projects';\nimport Contact from './Contact';\nimport Nav from './Nav';\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div>\n        <Nav />\n        <Switch>\n          <Redirect exact path=\"/\" to=\"/about\" />\n          <Route path='/about' component={About} />\n          <Route path='/resume' component={Resume} />\n          <Route path='/projects' component={Projects} />\n          <Route path='/contact' component={Contact} />\n          <Route component={Error} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport '@atlaskit/css-reset';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}